name: 发布应用

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: 安装pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: 获取pnpm缓存目录
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: 设置pnpm缓存
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 安装Rust
        uses: dtolnay/rust-toolchain@stable

      - name: 设置Rust缓存
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: 安装依赖 (Ubuntu)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: 安装前端依赖
        run: pnpm install

      - name: 构建Tauri应用
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: '动漫文件管理器 ${{ github.ref_name }}'
          releaseBody: |
            ## 动漫文件管理器 ${{ github.ref_name }}
            
            ### 功能
            - 智能文件名解析
            - 批量重命名
            - 文件夹组织
            - 硬链接支持
            - 元数据获取
            - 日志系统
            
            ### 下载
            - Windows: 可执行文件 (`.exe`)
            - macOS: 可执行文件 (`.app.tar.gz`)
            - Linux: 可执行文件 (`.AppImage`)
          releaseDraft: true
          prerelease: false
          args: --bundles ${{ matrix.platform == 'windows-latest' && 'nsis' || matrix.platform == 'macos-latest' && 'app' || 'appimage' }} --verbose