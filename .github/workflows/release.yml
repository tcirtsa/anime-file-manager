name: 发布应用

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: windows-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: 安装pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: 获取pnpm缓存目录
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: 设置pnpm缓存
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 安装Rust
        uses: dtolnay/rust-toolchain@stable

      - name: 设置Rust缓存
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: 安装前端依赖
        run: pnpm install

      - name: 检查图标文件
        run: |
          Get-ChildItem src-tauri/icons/
          if (!(Test-Path "src-tauri/icons/icon.ico")) { 
            Write-Error "icon.ico not found" 
            exit 1 
          }

      - name: 构建Tauri应用
        run: pnpm tauri build --verbose

      - name: 创建Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: '动漫文件管理器 ${{ github.ref_name }}'
          body: |
            ## 动漫文件管理器 ${{ github.ref_name }}
            
            ### 功能
            - 智能文件名解析
            - 批量重命名
            - 文件夹组织
            - 硬链接支持
            - 元数据获取
            - 日志系统
            
            ### 下载
            - Windows: 绿色版可执行文件 (`.exe`)
          draft: true
          prerelease: false

      - name: 上传绿色版exe
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: src-tauri/target/release/anime-file-manager.exe
          asset_name: anime-file-manager-${{ github.ref_name }}-windows-portable.exe
          asset_content_type: application/octet-stream
